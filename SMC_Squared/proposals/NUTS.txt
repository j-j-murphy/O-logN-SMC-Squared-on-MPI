from ordered_set import T
import numpy as np
from autograd import elementwise_grad as egrad


class NUTS_proposal():

    """
        Description
        -----------
        No-U-Turn-Sampler (NUTS) proposal distribution for an SMC-sampler. 
        Moves samples around the target using the leapfrog integration method over a fixed
        number of steps and a fixed step-size. In HMC omentum is usually used in Hamiltonian
        MCMC, but here we assume (for the time being) that the mass is the identity matrix,
        we therefore refer to it as velocity since momentum = mass * velocity
     
        
        Parameters
        ----------
        D: Dimension of target
        
        p : target distribution

        h : Step size used by Leapfrog

        Cov: Scalar term which increases the variance of the velocity distribution
          
        Author
        ------
        L.J. Devlin
    """

    def __init__(self, D, p, h, Cov):
        self.D = D
        self.target = p
        self.h=h

        # Set Maximum tree depth NUTS can take to stop exssesive tree growth. 
        self.MaxTreeDepth = 10
        
        # Set a gradient object which we call each time we require it inside Leapfrog
        self.grad=egrad(self.target.logpdf)

    def rvs(self, x_cond):
        """
        Description
        -----------
        Returns a new sample state at the end of the integer number of Leapfrog steps.
        """

        # Unpack position, initial velocity, and initial gradient 
        x = x_cond[0,:] 
        v = x_cond[1,:]
        grad_x=x_cond[2, :]

        x_new, v_new, t_new = self.generate_NUTS_samples(x, v, grad_x)
        
        return x_new, v_new, t_new

    def generate_NUTS_samples(self, x0, v0, grad_x):

        """
        Description
        -----------
        Checks if a U-turn is present in the furthest nodes in the NUTS
        tree
        """
        
        #joint lnp of x and momentum r
        logp = self.target.logpdf(x0)    
        self.H0 = logp - 0.5 * np.dot(v0, v0.T)            
        logu = np.float(self.H0 - np.random.exponential(1))      
        
        # initialize the tree 
        x = x0
        xminus = x0
        xplus = x0
        vminus = v0
        vplus = v0
        v = -v0
        gradminus = grad_x
        gradplus = grad_x
        t=0
        tplus=t
        tminus=t

        depth = 0  # initial depth of the tree
        n = 1  # Initially the only valid point is the initial point.
        stop = 0  # Main loop: will keep going until stop == 1.

        while (stop == 0):
            # Choose a direction. -1 = backwards, 1 = forwards.
            direction = np.int(2 * (np.random.uniform(0,1) < 0.5) - 1)

            if (direction == -1):
                xminus, vminus, gradminus, _, _, _, xprime, vprime, logpprime, nprime, stopprime, tminus, _, tprime = self.build_tree(xminus, vminus, gradminus, logu, direction, depth, tminus)
            else:
                _, _, _, xplus, vplus, gradplus, xprime, vprime, logpprime, nprime, stopprime, _, tplus, tprime    = self.build_tree(xplus, vplus, gradplus, logu, direction, depth, tplus)

             # Use Metropolis-Hastings to decide whether or not to move to a
            # point from the half-tree we just generated.
            if (stopprime == 0 and np.random.uniform() < min(1., np.float(nprime) / np.float(n))):
                x = xprime
                v = vprime
                t = tprime

            # Update number of valid points we've seen.
            n += nprime

            # Decide if it's time to stop.
            stop = stopprime or self.stop_criterion(xminus, xplus, vminus, vplus)           
            
            # Increment depth.
            depth += 1
            
            if(depth > self.MaxTreeDepth):
                print("Max tree size in NUTS reached")
                break
        
        return x, v, t


    def build_tree(self, x, v, grad_x, logu, direction, depth, t):
        if (depth == 0):
            xprime, vprime, gradprime = self.NUTSLeapfrog(x, v, grad_x, direction)
            logpprime = self.target.logpdf(xprime)   
            joint = logpprime - 0.5 * np.dot(vprime, vprime.T)
            nprime = np.int(logu < joint)
            stopprime = np.int((logu - 100.) >= joint)
            xminus = xprime
            xplus = xprime
            vminus = vprime
            vplus = vprime
            gradminus = gradprime
            gradplus = gradprime
            tprime = t + self.h
            tminus=tprime
            tplus=tprime


            
        else:
            # Recursion: Implicitly build the height j-1 left and right subtrees.                                                                               
            xminus, vminus, gradminus, xplus, vplus, gradplus, xprime, vprime, logpprime, nprime, stopprime, tminus, tplus, tprime  = self.build_tree(x, v, grad_x, logu, direction, depth - 1, t)
            
            # No need to keep going if the stopping criteria were met in the first subtree.
            if (stopprime == 0):
                if (direction == -1):
                    xminus, vminus, gradminus, _, _, _, xprime2, vprime2, logpprime2, nprime2, stopprime2, tminus, _,  tprime2    = self.build_tree(xminus, vminus, gradminus, logu, direction, depth - 1, tminus)
                else:
                    _, _, _, xplus, vplus, gradplus, xprime2, vprime2, logpprime2, nprime2, stopprime2, _, tplus, tprime2       = self.build_tree(xplus, vplus, gradplus, logu, direction, depth - 1, tplus)           
               
                if (np.random.uniform() < (np.float(nprime2) / max(np.float(np.int(nprime) + np.int(nprime2)), 1.))):
                    xprime = xprime2
                    logpprime = logpprime2
                    vprime = vprime2
                    tprime=tprime2
            

                # Update the number of valid points.
                nprime = np.int(nprime) + np.int(nprime2)

                # Update the stopping criterion.
                stopprime = np.int(stopprime or stopprime2 or self.stop_criterion(xminus, xplus, vminus, vplus))
                       

        return xminus, vminus, gradminus, xplus, vplus, gradplus, xprime, vprime, logpprime, nprime, stopprime, tminus, tplus, tprime
            

    def stop_criterion(self, xminus, xplus, rminus, rplus):
        """
        Description
        -----------
        Checks if a U-turn is present in the furthest nodes in the NUTS
        tree
        """
        dx = xplus - xminus
        return (np.dot(dx, rminus.T) < 0) or (np.dot(dx, rplus.T) < 0)
    
    def NUTSLeapfrog(self, x, v, grad_x, direction):
    
        """
        Description
        -----------
        Performs a single Leapfrog step returning the final position, velocity and gradient.
        """
        
        v = np.add(v, (direction*self.h/2)*grad_x)
        x = np.add(x, direction*self.h*v)
        grad_x = self.grad(x)
        v = np.add(v, (direction*self.h/2)*grad_x)
        
        return x, v, grad_x
